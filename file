git init: Initializes a new Git repository in the current directory.
git clone [repository-url]: Creates a local copy of an existing remote repository.
git add [file-name]: or git add .: Adds changes from the working directory to the staging area, preparing them for a commit. git add . stages all changes.
git status: Shows the current state of the working directory and the staging area, indicating which files are modified, staged, or untracked.
git commit -m "commit message": Records the staged changes to the local repository with a descriptive message.
git branch: Lists all local branches.
git branch [new-branch-name]: Creates a new branch.
git checkout [branch-name]: Switches to a different branch. In newer Git versions, git switch [branch-name] is preferred for switching branches.
git merge [branch-name]: Integrates changes from a specified branch into the current branch.
git pull: Fetches changes from a remote repository and merges them into the current local branch.
git push [remote-name] [branch-name]: Uploads committed changes from the local repository to a specified remote repository and branch.
git log: Displays the commit history of the current branch.
git diff: Shows the differences between various states of the repository, such as between the working directory and the staging area, or between two commits.
git remote add [remote-name] [remote-url]: Connects your local repository to a remote repository.
git reset [commit-hash]: Undoes changes by moving the HEAD pointer to a previous commit, potentially discarding subsequent commits.
git stash: Temporarily saves uncommitted changes and resets the working directory to a clean state.
git stash pop: Restores the most recently stashed changes to the working directory.


Where to use Git?
Git works on your computer, but you also use it with online services like GitHub, GitLab, or Bitbucket to share your work with others. These are called remote repositories.

In this tutorial, you'll learn how to use Git for your own projects and how to connect with remote repositories online.

Configure Git
Now let Git know who you are.

This is important for version control systems, as each Git commit uses this information:

Tip for Beginners: Configuring Git is safe.

You can change these settings at any time, they only affect how your name and email appear in your commits.


What is a Git Branch?
In Git, a branch is like a separate workspace where you can make changes and try new ideas without affecting the main project. Think of it as a "parallel universe" for your code.

Why Use Branches?
Branches let you work on different parts of a project, like new features or bug fixes, without interfering with the main branch.

Common Reasons to Create a Branch
Developing a new feature
Fixing a bug
Experimenting with ideas
Example: With and Without Git
Let's say you have a large project, and you need to update the design on it.

How would that work without and with Git:

Without Git:
Make copies of all the relevant files to avoid impacting the live version
Start working with the design and find that code depend on code in other files, that also need to be changed!
Make copies of the dependant files as well. Making sure that every file dependency references the correct file name
EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!
Save all your files, making a note of the names of the copies you were working on
Work on the unrelated error and update the code to fix it
Go back to the design, and finish the work there
Copy the code or rename the files, so the updated design is on the live version
(2 weeks later, you realize that the unrelated error was not fixed in the new design version because you copied the files before the fix)
With Git:
With a new branch called new-design, edit the code directly without impacting the main branch
EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!
Create a new branch from the main project called small-error-fix
Fix the unrelated error and merge the small-error-fix branch with the main branch
You go back to the new-design branch, and finish the work there
Merge the new-design branch with main (getting alerted to the small error fix that you were missing)
Branches allow you to work on different parts of a project without impacting the main branch.

When the work is complete, a branch can be merged with the main project.

You can even switch between branches and work on different projects without them interfering with each other.

Branching in Git is very lightweight and fast!

Creating a New Branch
Let's say you want to add a new feature. You can create a new branch for it.

Let add some new features to our index.html page.

We are working in our local repository, and we do not want to disturb or possibly wreck the main project.

So we create a new branch:

Example
git branch hello-world-images
Now we created a new branch called "hello-world-images"

Listing All Branches

